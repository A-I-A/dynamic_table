{"version":3,"sources":["components/InputForm/InputForm.module.css","components/Table/Table.module.css","redux/tableReducer.js","components/InputForm/InputForm.jsx","components/Table/Table.jsx","components/TableContainer/TableContainer.jsx","redux/redux-store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","data","idCount","columns","field","text","InputForm","addRow","onSubmit","e","row","el","target","value","preventDefault","className","style","form_wrapper","map","key","input_label","name","TableHeader","TableBody","rows","deleteRow","ejectColumnValues","id","TableRow","onClick","TableCell","cell","Table","table","connect","state","type","props","useState","isFormVisible","setFormVisibility","store","createStore","require","action","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8088ddd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_wrapper\":\"InputForm_form_wrapper__3lg1v\",\"input_label\":\"InputForm_input_label__6U3Uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3cVv6\",\"cell\":\"Table_cell__38xeP\"};","const ADD_ROW = 'ADD_ROW';\nconst DELETE_ROW = 'DELETE_ROW';\n\n let initialState = {data:[{\"id\":1, \"name\":\"Кейс\",\"occupation\":\"хакер\",\"sex\":\"мужчина\",\"addiction\":\"амфетамин\"},\n                           {\"id\":2,\"name\":\"Молли\",\"occupation\":\"уличный самурай\",\"sex\":\"женщина\",\"addiction\":\"\"},\n                           {\"id\":3,\"name\":\"Корто\",\"occupation\":\"отставной военный\",\"sex\":\"мужчина\",\"addiction\":\"\"},\n                           {\"id\":4,\"name\":\"Флинн\",\"occupation\":\"торговец\",\"sex\":\"мужчина\",\"addiction\":\"никотин\"}],\n                           idCount : 4,\n                    columns : [{ field: \"name\", text: \"Имя\" },\n                               { field: \"occupation\", text: \"Род занятий\" },\n                               { field: \"sex\", text: \"Пол\" },\n                               { field: \"addiction\", text: \"Зависимость\" }]}\n\nexport const tableReducer=(state=initialState, action)=>{\n    switch(action.type){\n        case ADD_ROW : return {...state, idCount : state.idCount+1, data : [...state.data, {...action.row, id : state.idCount +1}]}\n                                \n        case DELETE_ROW: return {...state, data : state.data.filter(el=> {return action.id !== el.id})}\n        default : return state;\n\n    }\n\n}\n\nexport const deleteRow=(id)=>{\n    return {type: DELETE_ROW, id}\n}\n\nexport const addRow=(row)=>{\n    return {type: ADD_ROW, row}\n}\n\n","import React from 'react';\nimport style from './InputForm.module.css'\n\nconst InputForm=({columns,addRow})=>{\n    const handleSubmit=(e)=>{\n        let row = {};\n        for (let el of columns){\n            row[el.field] =  e.target[el.field].value;\n        } \n        e.preventDefault();\n        addRow(row);\n        e.target = null;\n    }\n    return(\n        <form onSubmit={handleSubmit} className={style.form_wrapper}>\n            {columns.map(el=>{\n                return <label key={el.field} className={style.input_label}>{el.text}<input name={el.field}/> </label>\n            })}\n            <button> Ok </button>\n\n        </form>\n    )\n\n}\n\nexport default InputForm;","import React from 'react';\nimport style from './Table.module.css';\n\nconst Table =({data, columns ,deleteRow})=>{\n     return (\n    <table className={style.table}>   \n         <TableHeader columns={columns}  />\n          <TableBody columns={columns} rows={data} deleteRow={deleteRow}/>\n       </table>);\n}\n\n const TableHeader=({columns})=>{\n    return(\n      <thead><tr>\n          {columns.map(el=>{return  <TableCell key={el.field} value={el.text}/>})}\n       </tr></thead>\n    )\n }\n\n const TableBody=({rows,columns,deleteRow})=>{\n    let ejectColumnValues= columns.map(el=>{return el.field});\n    return(\n       <tbody>{rows.map(el=>{return <TableRow key={el.id} row={el} columns={ejectColumnValues} deleteRow={deleteRow}/>})}</tbody>\n    )\n }\n\n const TableRow=({row, columns,deleteRow})=>{\n    return(\n       <tr>\n          {columns.map(el=>{\n             return <TableCell key={el} value={row[el]}/>})}\n       <td><button onClick={()=>{deleteRow(row.id)}}>-</button></td>\n       </tr>\n    )\n } \n\n const TableCell = ({value})=>{\n    return <td className={style.cell}> {value} </td> \n }\n\nexport default Table;\n\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addRow, deleteRow } from '../../redux/tableReducer';\nimport InputForm from '../InputForm/InputForm';\nimport Table from '../Table/Table';\n\n\nconst  TableContainer = (props)=>{\n    let [isFormVisible, setFormVisibility] = useState(false);\n\n    return (\n    <div>\n        <Table  data={props.data} columns={props.columns} deleteRow={props.deleteRow}/>\n        <button onClick={()=>{setFormVisibility(!isFormVisible)}}> {isFormVisible ? \"Скрыть\" : \"Показать\"} </button> \n        {isFormVisible && <InputForm columns={props.columns} addRow={props.addRow}/>}\n    </div>\n    )\n}\n\nconst mapStateToProps=(state)=>{\n    return{\n        data : state.data,\n        columns : state.columns}  \n}\n\n\nexport default connect(mapStateToProps,{deleteRow,addRow})(TableContainer);\n\n","import { tableReducer } from \"./tableReducer\";\nconst { createStore } = require(\"redux\")\n\n\nconst store = createStore(tableReducer);\n\nexport default store;\n\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport TableContainer from './components/TableContainer/TableContainer';\nimport store from './redux/redux-store';\n\n\n\nfunction App() {\n  return ( <Provider store={store}>\n             <TableContainer />\n           </Provider> );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}